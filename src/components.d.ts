/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
import {
  PhraseData,
  TranslateHistory,
} from './types';
import {
  RequireSignInEvent,
  SaveTranslationEvent,
} from './components/translatable-modal/translatable-modal';
import {
  FetchTranslationEvent,
  StartTranslationEvent,
} from './components/translatable-text/translatable-text';

export namespace Components {
  interface TranslatableContainer {
    'firebaseConfigPath'?: string;
    'pageTitle': string;
  }
  interface TranslatableHistoryRow {
    'history': TranslateHistory;
  }
  interface TranslatableModal {
    'history': TranslateHistory[];
    'isUserSignedIn': boolean;
    'originalText': string;
    'translatedText': string;
  }
  interface TranslatableText {
    'file': string;
    'hash': string;
    'originalText': string;
    'preparing': boolean;
    'setPhrase': (phrase: PhraseData | null) => Promise<void>;
    'translatedText'?: string;
  }
  interface TranslatableUserChip {
    'color'?: string;
    'displayName'?: string;
    'photoURL'?: string;
    'textColor'?: string;
  }
}

declare global {


  interface HTMLTranslatableContainerElement extends Components.TranslatableContainer, HTMLStencilElement {}
  var HTMLTranslatableContainerElement: {
    prototype: HTMLTranslatableContainerElement;
    new (): HTMLTranslatableContainerElement;
  };

  interface HTMLTranslatableHistoryRowElement extends Components.TranslatableHistoryRow, HTMLStencilElement {}
  var HTMLTranslatableHistoryRowElement: {
    prototype: HTMLTranslatableHistoryRowElement;
    new (): HTMLTranslatableHistoryRowElement;
  };

  interface HTMLTranslatableModalElement extends Components.TranslatableModal, HTMLStencilElement {}
  var HTMLTranslatableModalElement: {
    prototype: HTMLTranslatableModalElement;
    new (): HTMLTranslatableModalElement;
  };

  interface HTMLTranslatableTextElement extends Components.TranslatableText, HTMLStencilElement {}
  var HTMLTranslatableTextElement: {
    prototype: HTMLTranslatableTextElement;
    new (): HTMLTranslatableTextElement;
  };

  interface HTMLTranslatableUserChipElement extends Components.TranslatableUserChip, HTMLStencilElement {}
  var HTMLTranslatableUserChipElement: {
    prototype: HTMLTranslatableUserChipElement;
    new (): HTMLTranslatableUserChipElement;
  };
  interface HTMLElementTagNameMap {
    'translatable-container': HTMLTranslatableContainerElement;
    'translatable-history-row': HTMLTranslatableHistoryRowElement;
    'translatable-modal': HTMLTranslatableModalElement;
    'translatable-text': HTMLTranslatableTextElement;
    'translatable-user-chip': HTMLTranslatableUserChipElement;
  }
}

declare namespace LocalJSX {
  interface TranslatableContainer extends JSXBase.HTMLAttributes<HTMLTranslatableContainerElement> {
    'firebaseConfigPath'?: string;
    'pageTitle': string;
  }
  interface TranslatableHistoryRow extends JSXBase.HTMLAttributes<HTMLTranslatableHistoryRowElement> {
    'history': TranslateHistory;
  }
  interface TranslatableModal extends JSXBase.HTMLAttributes<HTMLTranslatableModalElement> {
    'history'?: TranslateHistory[];
    'isUserSignedIn'?: boolean;
    'onCancel'?: (event: CustomEvent<void>) => void;
    'onRequireSignIn'?: (event: CustomEvent<RequireSignInEvent>) => void;
    'onSaveTranslation'?: (event: CustomEvent<SaveTranslationEvent>) => void;
    'originalText': string;
    'translatedText': string;
  }
  interface TranslatableText extends JSXBase.HTMLAttributes<HTMLTranslatableTextElement> {
    'file': string;
    'hash': string;
    'onFetchTranslation'?: (event: CustomEvent<FetchTranslationEvent>) => void;
    'onStartTranslation'?: (event: CustomEvent<StartTranslationEvent>) => void;
    'originalText': string;
    'preparing'?: boolean;
    'translatedText'?: string;
  }
  interface TranslatableUserChip extends JSXBase.HTMLAttributes<HTMLTranslatableUserChipElement> {
    'color'?: string;
    'displayName'?: string;
    'photoURL'?: string;
    'textColor'?: string;
  }

  interface IntrinsicElements {
    'translatable-container': TranslatableContainer;
    'translatable-history-row': TranslatableHistoryRow;
    'translatable-modal': TranslatableModal;
    'translatable-text': TranslatableText;
    'translatable-user-chip': TranslatableUserChip;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements extends LocalJSX.IntrinsicElements {}
  }
}


